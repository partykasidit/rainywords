{"version":3,"sources":["WordBox.js","Timer.js","socket.js","welcome.js","Score.js","Winner.js","SinglePlayer.js","Chat.js","App.js","serviceWorker.js","index.js"],"names":["WordBox","forwardRef","props","ref","word","CoolBox","timeout","idx","location","onDropped","destroyed","useState","pose","setPose","useEffect","setTimeout","clearTimeout","MovingWordBox","className","style","left","posed","top","y","bottom","transition","type","ease","duration","color","fontSize","invisible","opacity","passive","interpolate","Component","socket","openSocket","Welcome","input","setInput","setWaiting","setMorePlayer","setMyName","ambulance","Audio","avatar","setAvatar","handleOnSelect","e","target","value","handleSubmit","message","playerDetail","myName","emit","c","play","sendMessage","preventDefault","onSubmit","name","onChange","id","onClick","map","image","index","checked","src","alt","Score","players","playerId","Object","values","player","key","username","score","Winner","winner","max","forEach","findWinner","SinglePlayer","inputRef","count","setCount","words","setWords","timeLeft","setTimeLeft","setShowGame","setShowWaiting","showWinner","setShowWinner","randomWords","counter","size","length","loop","setInterval","delay","Math","floor","random","n","console","log","old","focus","clearInterval","intervalId","toString","backgroundColor","display","minutes","second","timer","oldWords","newWords","push","filter","w","Chat","setMessage","on","event","placeholder","App","setPlayers","setPlayerId","setRandomWords","showWelcome","setShowWelcome","showGame","showWaiting","lobbyPlayers","setLobbyPlayer","showSinglePlayer","setShowSinglePlayer","alternating","setAlternating","lobbyPlayer","rate","data","obj","mystyle","style2","padding","justifyContent","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.638220cb.chunk.js","sourcesContent":["import React, { useState, useEffect, forwardRef } from \"react\";\r\nimport \"./App.css\";\r\nimport posed, { PoseGroup } from \"react-pose\";\r\nimport { interpolate } from \"@popmotion/popcorn\";\r\n\r\nconst DURATION = 4000;\r\nconst WordBox = forwardRef((props, ref) => {\r\n    return (\r\n        <div ref={ref} {...props}>\r\n            {props.word}\r\n        </div>\r\n    );\r\n});\r\n//export const CoolBox = ({word, idx}) => {\r\nexport const CoolBox = ({ word, idx, location, onDropped, destroyed }) => {\r\n    const [pose, setPose] = useState(\"top\");\r\n    let timeout;\r\n    useEffect(() => {\r\n        setPose(\"bottom\");\r\n        timeout = setTimeout(() => onDropped(), DURATION);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (destroyed) {\r\n            clearTimeout(timeout);\r\n            setPose(\"destroyed\");\r\n            setTimeout(() => onDropped(), 1000);\r\n        }\r\n    }, [destroyed]);\r\n    return (\r\n        <MovingWordBox\r\n            className=\"thebox\"\r\n            style={{ left: location }}\r\n            pose={pose}\r\n            word={word}\r\n            idx={idx}\r\n        ></MovingWordBox>\r\n    );\r\n}; //key={idx}\r\n\r\nexport const MovingWordBox = posed(WordBox)({\r\n    top: { y: \"0vh\" },\r\n    bottom: {\r\n        y: \"90vh\",\r\n        //y 94vh\r\n        transition: {\r\n            y: {\r\n                type: \"tween\",\r\n                ease: \"linear\",\r\n                duration: DURATION\r\n            }\r\n        }\r\n    },\r\n    destroyed: {\r\n        color: \"#FFFF00\",\r\n        fontSize: \"100px\",\r\n        transition: {\r\n            fontSize: {\r\n                type: \"tween\",\r\n                ease: \"linear\",\r\n                duration: 1000\r\n            }\r\n        }\r\n    },\r\n\r\n    invisible: { opacity: 0 },\r\n\r\n    passive: {\r\n        opacity: [\r\n            \"y\",\r\n            interpolate([\"0vh\", \"70vh\", \"80vh\", \"90vh\"], [1, 1, 0, 0])\r\n        ]\r\n    }\r\n});\r\n\r\nexport default WordBox;\r\n","import React, { Component } from 'react'\r\n\r\nclass Timer extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      count: 180\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { count } = this.state\r\n    return (\r\n      <div>\r\n        <h1>Current Count: {count}</h1>\r\n      </div>\r\n    )\r\n  }\r\n  // setInterval\r\n  // clearInterval\r\n  componentDidMount() {\r\n    const { startCount } = this.props\r\n    this.setState({\r\n      count: startCount\r\n    })\r\n    this.doIntervalChange()\r\n  }\r\n\r\n\r\n  doIntervalChange = () => {\r\n    this.myInterval = setInterval(() => {\r\n      this.setState(prevState => ({\r\n        count: prevState.count <= 0 ? \"0\" : prevState.count - 1\r\n      }))\r\n    }, 1000)\r\n  }\r\n\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.myInterval)\r\n  }\r\n}\r\n\r\nexport default Timer","import openSocket from \"socket.io-client\";\r\n\r\nconst url = \"localhost:4000/game\";\r\n//https://rainy-words-server.herokuapp.com/admin/\r\n// https://rainy-words-server.herokuapp.com/game\r\n//https://rainy-words-server.herokuapp.com/admin/\r\nexport const socket = openSocket(url);\r\n","import React, { useState } from \"react\";\r\nimport { socket } from \"./socket\";\r\nimport \"./welcome.css\";\r\n//setup\r\n//var socket = io.connect('http://localhost:4000');\r\nfunction Welcome() {\r\n    //DOM manipulation\r\n    // var button = document.getElementById('button');\r\n    // var textBox = document.getElementById('textbox')\r\n    const [input, setInput] = useState(\"\");\r\n    const [alreadyClick, setAlreadyClick] = useState(0);\r\n    const [waiting, setWaiting] = useState(false);\r\n    const [morePlayer, setMorePlayer] = useState(0);\r\n    const [myName, setMyName] = useState(\"\");\r\n    const ambulance = new Audio(\"/amb.mp3\");\r\n    const [avatar, setAvatar] = useState(\"/redbird.png\");\r\n\r\n    const sendMessage = message => {\r\n        // socket.emit(\"addPlayer\", message);\r\n        // socket.emit('add_player',message);\r\n        const playerDetail = {\r\n            myName: input,\r\n            avatar\r\n        };\r\n        setMyName(message);\r\n        socket.emit(\"add_player\", playerDetail);\r\n        setWaiting(true); //\r\n        setMorePlayer(c => c + 1);\r\n\r\n        ambulance.play();\r\n    };\r\n\r\n    const handleOnSelect = e => {\r\n        setAvatar(e.target.value);\r\n    };\r\n\r\n    const changeInput = e => {\r\n        setInput(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = e => {\r\n        sendMessage(input);\r\n        setInput(\"\");\r\n        e.preventDefault();\r\n    };\r\n\r\n    const avatars = [\"/bluebird.png\", \"/redbird.png\", \"/yellowbird.png\"];\r\n\r\n    return (\r\n        <div className=\"Welcome\">\r\n            <div>\r\n                <h1>Rainy Words Game</h1>\r\n                <form onSubmit={handleSubmit}>\r\n                    <p>Enter your name: </p>\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        onChange={changeInput}\r\n                    ></input>\r\n                    <br />\r\n                    <button id=\"playbtn\" type=\"button\" onClick={handleSubmit}>\r\n                        Play Online\r\n                    </button>\r\n                    <div>\r\n                        {avatars.map((image, index) => {\r\n                            return (\r\n                                <ul>\r\n                                    <input\r\n                                        type=\"radio\"\r\n                                        name=\"avatar\"\r\n                                        value={image}\r\n                                        checked={avatar === image}\r\n                                        onChange={handleOnSelect}\r\n                                    />\r\n                                    <img\r\n                                        className=\"avatar\"\r\n                                        src={image}\r\n                                        alt=\"loading...\"\r\n                                    ></img>\r\n                                </ul>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Welcome;\r\n\r\n// {waiting && (\r\n//     <div>\r\n//         <h1>Welcome, {myname}</h1>\r\n//         <h1>\r\n//             {morePlayer <= 2 ? (\r\n//                 <h1> Waiting for more players...</h1>\r\n//             ) : (\r\n//                 <button type=\"button\">Play</button>\r\n//             )}\r\n//         </h1>\r\n//     </div>\r\n// )}\r\n// </div>\r\n\r\n// const handleClick = e => {\r\n//     socket.emit(\"add_player\",name);\r\n\r\n// };\r\n// {(morePlayer <= 2)?(<h1> Waiting for more players...</h1>):(<button type=\"button\">Play</button>)}\r\n\r\n// const buffer = <h1> Waiting for more players...</h1>;\r\n// if (morePlayer <= 2) {\r\n//     buffer = (\r\n//         <h1>\r\n//             <button type=\"button\">Play</button>\r\n//         </h1>\r\n//     );\r\n// }\r\n// {\r\n//     morePlayer <= 2 ? (\r\n//         <h1> Waiting for more players...</h1>\r\n//     ) : (\r\n//         <button type=\"button\">Play</button>\r\n//     );\r\n// }\r\n","import React from \"react\";\r\nimport { socket } from \"./socket\";\r\nimport \"./Score.css\";\r\n\r\nfunction Score({ players, playerId }) {\r\n    // const listItems = players.map(player => (\r\n    //     <li key={player.username}>{players.score}</li>\r\n\r\n    // ));\r\n    return (\r\n        <div className=\"Score\">\r\n            {/* // <div style={{ float: \"right\" }}> */}\r\n            <ul>\r\n                {Object.values(players).map(player => {\r\n                    return (\r\n                        <li key={player.id}>\r\n                            {player.username}:{player.score}\r\n                        </li>\r\n                    );\r\n                })}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\nexport default Score;\r\n\r\n// <h1>\r\n//                 {players !== null &&\r\n//                     `${players.name}: ${players[userId].score}`}\r\n//             </h1>\r\n\r\n{\r\n    /* {userId} */\r\n}\r\n{\r\n    /* <li>\r\n                {Object.values(players).map(val => {\r\n                    return (\r\n                        <div>\r\n                            {val.id} + {val.name} + {val.score}\r\n                        </div>\r\n                    );\r\n                })}\r\n            </li> */\r\n}\r\n\r\n{\r\n    /* <h1>{players !== null && `${players.name}: ${players.score}`}</h1> */\r\n}\r\n{\r\n    /* <h1>{players[oppId].username}: {players[oppId].score}</h1> */\r\n}\r\n\r\n// style={{ display: \"flex\",\r\n// justifyContent: \"flex-end\"\r\n// }}\r\n","import React from \"react\";\r\nimport { socket } from \"./socket\";\r\n\r\nfunction Winner({ players }) {\r\n    // const listItems = players.map(player => (\r\n    //     <li key={player.username}>{players.score}</li>\r\n\r\n    // ));\r\n    let winner = findWinner(players);\r\n\r\n    return (\r\n        <div className=\"Winnner\">\r\n            <div>{winner}</div>\r\n        </div>\r\n    );\r\n}\r\nexport default Winner;\r\n\r\nfunction findWinner(players) {\r\n    let max = 0;\r\n    let winner = \"Nobody\";\r\n    Object.values(players).forEach(player => {\r\n        if (player.score > max) {\r\n            max = player.score;\r\n            winner = player.username;\r\n        }\r\n    });\r\n    return (\r\n        <div>\r\n            The Winner is {winner} with score: {max} !!!!!\r\n        </div>\r\n    );\r\n}\r\n\r\n// <h1>\r\n//                 {players !== null &&\r\n//                     `${players.name}: ${players[userId].score}`}\r\n//             </h1>\r\n\r\n// let arraywinner = [];\r\n// Object.values(players).forEach(player => {\r\n//     if (player.score=== max) {\r\n//         arraywinner.push(player.username);\r\n\r\n//     }\r\n// });\r\n// let list = (arraywinner.map((win,index)=> {<p key={index}>{win}</p>});\r\n\r\n// if(arraywinner.length>1){\r\n\r\n//     showListofWinner =( <div>{list}</div>\r\n//     <div>With Score of {max} </div> );\r\n\r\n// };\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { CoolBox } from \"./WordBox\";\r\nimport \"./SinglePlayer.css\";\r\nimport Timer from \"./Timer\";\r\nimport Welcome from \"./welcome\";\r\nimport { socket } from \"./socket\";\r\nimport Score from \"./Score\";\r\nimport Winner from \"./Winner\";\r\n\r\nfunction SinglePlayer() {\r\n    const [count, setCount] = useState(0);\r\n    const [words, setWords] = useState([]);\r\n    // console.log(data);\r\n    const [input, setInput] = useState(\"\");\r\n    const [players, setPlayers] = useState({});\r\n    //  const [oppId, setOppId] = useState(\"\");\r\n    const [playerId, setPlayerId] = useState(\"\");\r\n    // const [myRandomWords, setmyRandomWords] = useState([]);\r\n    const [morePlayer, setMorePlayer] = useState(0);\r\n    // initialize timeLeft with the seconds prop\r\n    const [timeLeft, setTimeLeft] = useState(300);\r\n    const [showWelcome, setShowWelcome] = useState(true);\r\n    const [showGame, setShowGame] = useState(false);\r\n    const [showWaiting, setShowWaiting] = useState(false);\r\n    const [lobbyPlayers, setLobbyPlayer] = useState(0);\r\n    const [showWinner, setShowWinner] = useState(false);\r\n    const [arrayReceived, setArrayReceived] = useState(false);\r\n    // const listItems = players.map(player => (\r\n    //     <li key={player.username}>{players.score}</li>\r\n\r\n    // ));\r\n    var duration = 10;\r\n    const randomWords = [\r\n        \"Gareth\",\r\n        \"Ronaldo\",\r\n        \"Falcao\",\r\n        \"Ronaldo\",\r\n        \"BigC\",\r\n        \"Batman\",\r\n        \"Grid\",\r\n        \"Party\",\r\n        \"Tee\",\r\n        \"Moomin\",\r\n        \"Jelly\",\r\n        \"Pond\",\r\n        \"Pat\",\r\n        \"Muang\",\r\n        \"Totee\",\r\n        \"Messi\",\r\n        \"Bale\",\r\n        \"Robben\",\r\n        \"Neuer\",\r\n        \"Rooney\",\r\n        \"Paul\"\r\n    ];\r\n\r\n    const resetGame = () => {\r\n        setTimeLeft(duration);\r\n        setShowGame(true);\r\n        setCount(count => 0);\r\n        setShowWinner(false);\r\n        setShowWaiting(false);\r\n        setShowGame(true);\r\n    };\r\n\r\n    let inputRef;\r\n    let counter = 0;\r\n    useEffect(() => {\r\n        const size = randomWords.length;\r\n\r\n        const loop = setInterval(() => {\r\n            const delay = Math.floor(Math.random() * 100) + 100; //Random delay\r\n            const n = counter++;\r\n            console.log(n);\r\n            setTimeout(() => {\r\n                setWords(old => [\r\n                    ...old,\r\n                    {\r\n                        id: n,\r\n                        word: randomWords[n % size],\r\n                        location: Math.floor(Math.random() * 60) + 20 + \"vw\",\r\n                        destroyed: false\r\n                    }\r\n                ]);\r\n            }, delay);\r\n            // console.log(words);\r\n        }, 50); // Spam Rate\r\n\r\n        if (inputRef) {\r\n            inputRef.focus();\r\n        }\r\n        return () => clearInterval(loop);\r\n    }, [showWinner]);\r\n\r\n    const handleInput = e => {\r\n        setInput(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = e => {\r\n        setWords(oldWords => {\r\n            const newWords = [];\r\n            for (const word of oldWords) {\r\n                if (word.word !== input) {\r\n                    newWords.push(word);\r\n                } else {\r\n                    newWords.push({ ...word, destroyed: true });\r\n                    setCount(c => c + 1);\r\n                    socket.emit(\"increase_point\", 1);\r\n                }\r\n            }\r\n            return newWords;\r\n        });\r\n        setInput(\"\");\r\n\r\n        e.preventDefault();\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (timeLeft === 0) {\r\n            setShowWinner(true);\r\n        }\r\n    }, [timeLeft]);\r\n\r\n    useEffect(() => {\r\n        if (!timeLeft) return;\r\n\r\n        const intervalId = setInterval(() => {\r\n            setTimeLeft(timeLeft => timeLeft - 1);\r\n        }, 1000);\r\n\r\n        return () => clearInterval(intervalId);\r\n    }, [timeLeft]); //showGame\r\n\r\n    const timer = timeLeft => {\r\n        var minutes = Math.floor(timeLeft / 60);\r\n        var second = timeLeft % 60;\r\n\r\n        if (second < 10) {\r\n            second = \"0\" + second;\r\n        }\r\n        return (\r\n            <h1>\r\n                Timer: {minutes}:{second}\r\n            </h1>\r\n        );\r\n    };\r\n\r\n    var style = {\r\n        color: \"#\" + Math.floor(Math.random() * 0x1000000).toString(16),\r\n        backgroundColor:\r\n            \"#\" + Math.floor(Math.random() * 0x1000000).toString(16)\r\n    };\r\n    return (\r\n        <header className=\"a\" style={style}>\r\n            <div style={{ display: \"flex-inline\" }}>\r\n                {showWinner ? (\r\n                    <div className=\"b\" style={style}>\r\n                        <h1>GameOver</h1>\r\n                        <button onClick={resetGame}>Play Again</button>\r\n                    </div>\r\n                ) : (\r\n                    <h1 className=\"c\" style={style}>\r\n                        {timer(timeLeft)}\r\n                    </h1>\r\n                )}\r\n            </div>\r\n            <div>\r\n                <p>{count}</p>\r\n            </div>\r\n\r\n            <form className=\"d\" style={style} onSubmit={handleSubmit}>\r\n                <input\r\n                    onChange={handleInput}\r\n                    value={input}\r\n                    ref={input => {\r\n                        inputRef = input;\r\n                    }}\r\n                />\r\n            </form>\r\n\r\n            {words.map(({ word, location, id, destroyed }, idx) => (\r\n                <CoolBox\r\n                    className=\"thebox\"\r\n                    word={word}\r\n                    location={location}\r\n                    key={id}\r\n                    destroyed={destroyed}\r\n                    onDropped={() =>\r\n                        setWords(old => old.filter(w => w.id !== id))\r\n                    }\r\n                ></CoolBox>\r\n            ))}\r\n        </header>\r\n    );\r\n}\r\nexport default SinglePlayer;\r\n","import { socket } from \"./socket\";\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nfunction Chat({ players, playerId }) {\r\n    // const messages = []\r\n    const [message, setMessage] = useState([]);\r\n    const [input, setInput] = useState(\"\");\r\n\r\n    //playerId !== \"\" &&\r\n\r\n    useEffect(() => {\r\n        console.log(playerId);\r\n        socket.emit(\"UpdateChat\", message => {\r\n            console.log(message);\r\n            setMessage(message);\r\n        });\r\n\r\n        socket.on(\"messageToClient\", message => {\r\n            console.log(message);\r\n            setMessage(message);\r\n        });\r\n    }, []);\r\n\r\n    \r\n\r\n    const sendChat = () => {\r\n        socket.emit(\"ChatMessage\", input);\r\n    };\r\n\r\n    const changeInput = event => {\r\n        setInput(event.target.value);\r\n    };\r\n\r\n    const handleSubmit = event => {\r\n        socket.emit(\"ChatMessage\", players[playerId].username + \": \" + input);\r\n        setInput(\"\");\r\n        event.preventDefault();\r\n    };\r\n\r\n    const handleOnClick = event => {\r\n        socket.emit(\"ChatMessage\", players[playerId].username + \": \" + input);\r\n        setInput(\"\");\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat-window\">\r\n            <div className=\"chat-box\">\r\n                {message.map(word => (\r\n                    <div>{word}</div>\r\n                ))}\r\n            </div>\r\n            <form\r\n                id=\"form\"\r\n                className=\"chat-form-submit\"\r\n                onSubmit={handleSubmit}\r\n            >\r\n                <input\r\n                    value={input}\r\n                    onChange={changeInput}\r\n                    name=\"message\"\r\n                    placeholder=\"Message\"\r\n                ></input>\r\n                <button className=\"send\" type=\"button\" onClick={handleOnClick}>\r\n                    Send\r\n                </button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chat;\r\n\r\n// socket.on(\"msgToClients\", message => {\r\n//     messages.push(message);\r\n// });\r\n\r\n// const handleOnClick = (name, text) => {\r\n//     socket.emit(\"msgToServer\", `${name}: ${text}`);\r\n// };\r\n\r\n// const handleOnClick = (name, text) => {\r\n//     socket.emit(\"msgToServer\", `${name}: ${text}`);\r\n// };\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { CoolBox } from \"./WordBox\";\r\nimport \"./App.css\";\r\nimport Timer from \"./Timer\";\r\nimport Welcome from \"./welcome\";\r\nimport { socket } from \"./socket\";\r\nimport Score from \"./Score\";\r\nimport Winner from \"./Winner\";\r\nimport SinglePlayer from \"./SinglePlayer\";\r\nimport Chat from \"./Chat\";\r\n\r\n// const url = \"localhost:4000\"\r\n// const socket = socketIOClient(url)\r\nfunction App() {\r\n    const [count, setCount] = useState(0);\r\n    const [words, setWords] = useState([]);\r\n    // console.log(data);\r\n    const [input, setInput] = useState(\"\");\r\n    const [players, setPlayers] = useState({});\r\n    //  const [oppId, setOppId] = useState(\"\");\r\n    const [playerId, setPlayerId] = useState(\"\");\r\n    const [randomWords, setRandomWords] = useState([]);\r\n    const [morePlayer, setMorePlayer] = useState(0);\r\n\r\n    var duration = 60;\r\n    // initialize timeLeft wsith the seconds prop\r\n    const [timeLeft, setTimeLeft] = useState(-1);\r\n    const [showWelcome, setShowWelcome] = useState(true);\r\n    const [showGame, setShowGame] = useState(false);\r\n    const [showWaiting, setShowWaiting] = useState(false);\r\n    const [lobbyPlayers, setLobbyPlayer] = useState(0);\r\n    const [showWinner, setShowWinner] = useState(false);\r\n    const [arrayReceived, setArrayReceived] = useState(false);\r\n    const [showSinglePlayer, setShowSinglePlayer] = useState(false);\r\n    const [alternating, setAlternating] = useState(0);\r\n\r\n    const playSinglePlayer = () => {\r\n        setShowSinglePlayer(true);\r\n        setShowWelcome(false);\r\n        setTimeLeft(duration);\r\n    };\r\n\r\n    const resetGame = () => {\r\n        socket.emit(\"reset_game\");\r\n        //setTimeLeft(duration);\r\n    };\r\n\r\n    const handlePlayGame = e => {\r\n        socket.emit(\"clickPlay\");\r\n    };\r\n\r\n    useEffect(() => {\r\n        socket.on(\"1sec\", () => {\r\n            setTimeLeft(timeLeft => timeLeft - 1);\r\n            if (!showWaiting) {\r\n                setAlternating(alternating => alternating + 1);\r\n            }\r\n            console.log(\"1sec\");\r\n        });\r\n\r\n        socket.on(\"reset_game\", () => {\r\n            console.log(\"reset the game\");\r\n            setTimeLeft(duration);\r\n            setShowGame(true);\r\n            setCount(count => 0);\r\n            setShowWinner(false);\r\n            setShowWaiting(false);\r\n            setShowGame(true);\r\n        });\r\n\r\n        socket.on(\"players_changed\", players => {\r\n            // every change of players state\r\n            setPlayers(players);\r\n            console.log(players);\r\n        });\r\n\r\n        socket.on(\"setPlayerId\", playerId => {\r\n            setPlayerId(playerId);\r\n            console.log(playerId);\r\n            setShowWelcome(false);\r\n            setShowWaiting(true);\r\n\r\n            // console.log(players[playerId].id);\r\n        });\r\n\r\n        socket.on(\"number_of_players_changed\", lobbyPlayer => {\r\n            setLobbyPlayer(lobbyPlayer);\r\n            console.log(\"loby player :\" + lobbyPlayer);\r\n        });\r\n\r\n        socket.on(\"startGame\", () => {\r\n            console.log(\"StartGame\");\r\n\r\n            socket.emit(\"get_words\", {\r\n                duration: 60, //sec\r\n                rate: 5 //words per sec\r\n            });\r\n\r\n            socket.on(\"words\", data => {\r\n                // console.log(data);\r\n                if (words.length === 0) {\r\n                    setRandomWords(() => {\r\n                        console.log(\"mapping data\");\r\n                        return data.map(obj => {\r\n                            return obj.word;\r\n                        });\r\n                    });\r\n                }\r\n                // setShowWaiting(false);\r\n                // setShowGame(true);\r\n                // so get word\r\n                // socket on word\r\n                // socket.emit(\"get_words\", {\r\n                //     duration: 50, //sec\r\n                //     rate: 6 //words per sec\r\n                // });\r\n                // setTimeLeft(duration);\r\n            });\r\n\r\n            setTimeLeft(duration);\r\n            setShowWaiting(false);\r\n            setShowGame(true);\r\n        });\r\n    }, []);\r\n\r\n    // useEffect(()=>{\r\n\r\n    // })\r\n\r\n    let inputRef;\r\n    let counter = 0;\r\n    useEffect(() => {\r\n        if (showGame && !showWinner) {\r\n            const size = randomWords.length;\r\n\r\n            const loop = setInterval(() => {\r\n                const delay = Math.floor(Math.random() * 100) + 100; //Random delay\r\n                const n = counter++;\r\n                console.log(n);\r\n                setTimeout(() => {\r\n                    setWords(old => [\r\n                        ...old,\r\n                        {\r\n                            id: n,\r\n                            word: randomWords[n % size],\r\n                            location:\r\n                                Math.floor(Math.random() * 60) + 20 + \"vw\",\r\n                            destroyed: false\r\n                        }\r\n                    ]);\r\n                }, delay);\r\n                // console.log(words);\r\n            }, 200); // Spam Rate\r\n\r\n            if (inputRef) {\r\n                inputRef.focus();\r\n            }\r\n            return () => clearInterval(loop);\r\n        }\r\n    }, [randomWords, showWinner, showGame]);\r\n    // console.log(data);\r\n\r\n    //for timer\r\n    // useEffect(() => {\r\n    //     if (!timeLeft) return;\r\n    // }, [timeLeft]); //showGame\r\n\r\n    useEffect(() => {\r\n        if (timeLeft === 0) {\r\n            setShowWinner(true);\r\n        }\r\n    }, [timeLeft]);\r\n\r\n    // showGame\r\n    const handleInput = e => {\r\n        setInput(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = e => {\r\n        if (!showWinner && showGame) {\r\n            setWords(oldWords => {\r\n                const newWords = [];\r\n                for (const word of oldWords) {\r\n                    if (word.word !== input) {\r\n                        newWords.push(word);\r\n                    } else {\r\n                        newWords.push({ ...word, destroyed: true });\r\n                        setCount(c => c + 1);\r\n                        socket.emit(\"increase_point\", 1);\r\n                    }\r\n                }\r\n                return newWords;\r\n            });\r\n            setInput(\"\");\r\n        }\r\n        e.preventDefault();\r\n    };\r\n\r\n    const timer = timeLeft => {\r\n        var minutes = Math.floor(timeLeft / 60);\r\n        var second = timeLeft % 60;\r\n\r\n        if (second < 10) {\r\n            second = \"0\" + second;\r\n        }\r\n        return (\r\n            <h1>\r\n                {minutes}:{second}\r\n            </h1>\r\n        );\r\n    };\r\n\r\n    // if (timeLeft === 0) {\r\n    //     setShowWinner(true);\r\n    // }\r\n\r\n    let mystyle = {};\r\n    let style2 = {};\r\n\r\n    if (alternating % 4 === 0) {\r\n        mystyle = {\r\n            color: \"purple\",\r\n            backgroundColor: \"pink\",\r\n            padding: \"5px\"\r\n        };\r\n        style2 = {\r\n            color: \"green\"\r\n        };\r\n    } else if (alternating % 3 === 0) {\r\n        mystyle = {\r\n            color: \"black\",\r\n            backgroundColor: \"DodgerBlue\",\r\n            padding: \"10px\"\r\n        };\r\n        style2 = {\r\n            color: \"yellow\"\r\n        };\r\n    } else if (alternating % 2 === 0) {\r\n        mystyle = {\r\n            color: \"green\",\r\n            backgroundColor: \"yellow\",\r\n            padding: \"15px\"\r\n        };\r\n        style2 = {\r\n            color: \"purple\"\r\n        };\r\n    } else {\r\n        mystyle = {\r\n            color: \"orange\",\r\n            backgroundColor: \"red\",\r\n            padding: \"20px\"\r\n        };\r\n        style2 = {\r\n            color: \"red\"\r\n        };\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {/* Hello{randomWords} */}\r\n            {showSinglePlayer && <SinglePlayer />}\r\n            {showWaiting && (\r\n                <>\r\n                    <div className=\"welcomePlayer\">\r\n                        <div>\r\n                            {\" \"}\r\n                            Welcome,\r\n                            {playerId !== \"\" && players[playerId].username}\r\n                            <>\r\n                                {\" \"}\r\n                                <img\r\n                                    className=\"avatar\"\r\n                                    src={players[playerId].avatar}\r\n                                    alt=\"\"\r\n                                />\r\n                            </>\r\n                        </div>\r\n                    </div>\r\n                    <h1>\r\n                        {lobbyPlayers < 2 ? (\r\n                            <div className=\"Waiting\">\r\n                                Waiting for more players...\r\n                                <div>\r\n                                    <img src=\"/cat.gif\" alt=\"loading...\" />\r\n                                </div>\r\n                            </div>\r\n                        ) : (\r\n                            <button\r\n                                id=\"play\"\r\n                                type=\"button\"\r\n                                onClick={handlePlayGame}\r\n                            >\r\n                                Play\r\n                            </button>\r\n                        )}\r\n                    </h1>\r\n                    <Chat players={players} playerId={playerId} />\r\n                </>\r\n            )}\r\n            {showGame && (\r\n                <header className=\"App-header\">\r\n                    <div style={{ display: \"flex-inline\" }}>\r\n                        <Score\r\n                            className=\"showScore\"\r\n                            players={players}\r\n                            playerId={playerId}\r\n                            style={{ justifyContent: \"flex-end\" }}\r\n                        />\r\n                        {/* <div>{timers}</div> */}\r\n\r\n                        {showWinner ? (\r\n                            <div className=\"EndGame\">\r\n                                <h1>GameOver</h1>\r\n                                <Winner players={players} />\r\n                                <button onClick={resetGame}>Play Again</button>\r\n                            </div>\r\n                        ) : (\r\n                            // <h1>Timer: {timeLeft}</h1>\r\n                            <h1>{timer(timeLeft)}</h1>\r\n                        )}\r\n\r\n                        {/* <Score players={players} userId={oppId} /> */}\r\n                    </div>\r\n                    <div>\r\n                        <p>\r\n                            {playerId !== \"\" && players[playerId].username}'s\r\n                            score: {count}\r\n                        </p>\r\n                    </div>\r\n\r\n                    <form onSubmit={handleSubmit}>\r\n                        <input\r\n                            onChange={handleInput}\r\n                            value={input}\r\n                            ref={input => {\r\n                                inputRef = input;\r\n                            }}\r\n                        />\r\n                    </form>\r\n\r\n                    {words.map(({ word, location, id, destroyed }, idx) => (\r\n                        <CoolBox\r\n                            className=\"thebox\"\r\n                            word={word}\r\n                            location={location}\r\n                            key={id}\r\n                            destroyed={destroyed}\r\n                            onDropped={() =>\r\n                                setWords(old => old.filter(w => w.id !== id))\r\n                            }\r\n                        ></CoolBox>\r\n                    ))}\r\n                </header>\r\n            )}\r\n            {showWelcome && (\r\n                <>\r\n                    {\" \"}\r\n                    <Welcome />\r\n                    <div className=\"singlePlayer \">\r\n                        <button\r\n                            style={mystyle}\r\n                            id=\"singlePlayer\"\r\n                            type=\"button\"\r\n                            onClick={playSinglePlayer}\r\n                        >\r\n                            Play SinglePlayer\r\n                        </button>\r\n                        <div id=\"singlePlayerMessage\" style={style2}>\r\n                            Single Player is very Hardcore and have alot of bugs\r\n                        </div>\r\n                    </div>\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n//`\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}